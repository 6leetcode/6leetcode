{"version":3,"sources":["Solutions/index.tsx","CodeBox/index.tsx","i18n.ts","Header/index.tsx","Questions/index.tsx","App.tsx","index.tsx","types.ts"],"names":["Solutions","localServer","id","useParams","useState","solutions","setSolutions","tabList","setTabList","active","setActive","i18n","useTranslation","content","translated_content","question","setQuestion","useEffect","item","window","localStorage","getItem","JSON","parse","axios","get","then","response","status","console","error","data","LanguagesDefinition","lang","solution","language","push","key","tab","_","uniqBy","length","find","Content","className","span","title","question_frontend_id","translated_title","style","marginRight","dangerouslySetInnerHTML","__html","Buffer","from","toString","defaultActiveTabKey","activeTabKey","onTabChange","log","map","filename","CodeBox","copied","setCopied","text","trim","onCopy","setTimeout","toLowerCase","a11yDark","showLineNumbers","resources","languages","use","initReactI18next","init","lng","Object","keys","keySeparator","interpolation","escapeValue","Header","setLanguage","menuKey","setMenuKey","location","useLocation","langText","i","name","pathname","list","split","to","theme","onClick","info","mode","selectedKeys","defaultSelectedKeys","Item","overlay","changeLanguage","setItem","DownOutlined","Questions","currentPage","setCurrentPage","totalQuestions","setTotalQuestions","questions","setQuestions","t","category","undefined","res","allNum","str","findNum","param","question_id","stringify","header","Text","strong","dataSource","renderItem","CheckOutlined","color","paid_only","LockOutlined","UnlockOutlined","difficulty","acRate","current","total","showSizeChanger","pageSize","onChange","page","App","path","element","Footer","textAlign","rel","target","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.327d01e2.chunk.js","sourcesContent":["import _ from 'lodash';\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { CardTabListType } from \"antd/lib/card\";\nimport { Empty, Layout, Card, Col, Row } from \"antd\";\n\nimport CodeBox from '../CodeBox';\nimport { IQuestion, ISolution, LanguagesDefinition } from '../types';\n\nexport default function Solutions({ localServer }: any) {\n  let { id } = useParams();\n\n  const [solutions, setSolutions] = useState<ISolution[]>([]);\n  const [tabList, setTabList] = useState<CardTabListType[]>([]);\n  const [active, setActive] = useState(\"\");\n  const { i18n } = useTranslation();\n\n  const [question, setQuestion] = useState<IQuestion>({ content: \"\", translated_content: \"\" } as IQuestion);\n\n  useEffect(() => {\n    let item = window.localStorage.getItem(id);\n    if (item !== null) {\n      setQuestion(JSON.parse(item) as IQuestion);\n    }\n  }, [id])\n\n  useEffect(() => {\n    axios.get(localServer + \"/solutions/\" + id + \".json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.error(\"request questions list with error:\", response.status);\n        } else {\n          setSolutions(response.data);\n        }\n      });\n  }, [id, localServer]);\n\n  useEffect(() => {\n    let tabList: CardTabListType[] = [];\n    for (let lang of LanguagesDefinition) {\n      for (let solution of solutions) {\n        if (lang.language === solution.language) {\n          tabList.push({\n            key: solution.language,\n            tab: solution.language,\n          });\n        }\n      }\n    }\n    setTabList(_.uniqBy(tabList, 'key'));\n  }, [solutions]);\n\n  useEffect(() => {\n    if (tabList.length >= 1) {\n      let lang = window.localStorage.getItem(\"language_show\");\n      if (lang !== \"\" && lang !== null) {\n        let find = false;\n        for (let tab of tabList) {\n          if (tab.key === lang) {\n            find = true;\n            break;\n          }\n        }\n        if (find) {\n          setActive(lang);\n        } else {\n          setActive(tabList[0].key);\n        }\n      } else {\n        setActive(tabList[0].key);\n      }\n    }\n  }, [tabList]);\n\n  return (\n    <Layout.Content className=\"content\">\n      <Row>\n        <Col span={9}>\n          <Card title={\n            i18n.language === \"en-US\" ?\n              (question.question_frontend_id + \". \" + question.title) :\n              (question.question_frontend_id + \". \" + question.translated_title)\n          } style={{ marginRight: '10px' }}>\n            {\n              i18n.language === \"en-US\" ?\n                <div dangerouslySetInnerHTML={{ __html: Buffer.from(question.content, \"base64\").toString(\"utf-8\") }} /> :\n                <div dangerouslySetInnerHTML={{ __html: Buffer.from(question.translated_content, \"base64\").toString(\"utf-8\") }} />\n            }\n          </Card>\n        </Col>\n        <Col span={15}>\n          <Card\n            tabList={tabList}\n            defaultActiveTabKey={active || \"\"}\n            activeTabKey={active || \"\"}\n            onTabChange={key => {\n              console.log(key);\n\n              setActive(key);\n            }}\n          >\n            {\n              solutions.length === 0 ? <Empty /> : solutions.map(solution => {\n                return (\n                  solution.language !== active ? \"\" : <CodeBox solution={solution} key={solution.filename} />\n                );\n              })\n            }\n          </Card>\n        </Col>\n      </Row>\n    </Layout.Content >\n  );\n}\n","import { useState } from \"react\";\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { CopyOutlined, CheckOutlined } from '@ant-design/icons';\nimport { a11yDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nimport './index.scss';\n\nexport default function CodeBox({ solution }: any) {\n  let [copied, setCopied] = useState(false);\n\n  return (\n    <div className=\"codebox\">\n      <CopyToClipboard text={Buffer.from(solution.data, \"base64\").toString(\"utf-8\").trim()} onCopy={() => {\n        setCopied(true);\n        setTimeout(() => {\n          setCopied(false);\n        }, 500);\n      }}>\n        {copied ? <CheckOutlined className=\"copyButton\" /> : <CopyOutlined className=\"copyButton\" />}\n      </CopyToClipboard>\n      <SyntaxHighlighter language={solution.language.toLowerCase()}\n        style={a11yDark} showLineNumbers>\n        {Buffer.from(solution.data, \"base64\").toString(\"utf-8\").trim()}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nexport const resources = {\n  \"zh-CN\": {\n    \"translation\": {\n      \"difficulty.Easy\": \"简单\",\n      \"difficulty.Hard\": \"困难\",\n      \"difficulty.Medium\": \"中等\",\n      \"title.Question\": \"题目\",\n      \"title.Pay\": \"付费\",\n      \"title.Difficulty\": \"难度\",\n      \"title.AcRate\": \"通过率\",\n    },\n  },\n  \"en-US\": {\n    \"translation\": {\n      \"difficulty.Easy\": \"Easy\",\n      \"difficulty.Hard\": \"Hard\",\n      \"difficulty.Medium\": \"Medium\",\n      \"title.Question\": \"Question\",\n      \"title.Pay\": \"Pay\",\n      \"title.Difficulty\": \"Difficulty\",\n      \"title.AcRate\": \"Ac Rate\",\n    },\n  },\n};\n\nexport const languages = [\n  {\n    \"name\": \"zh-CN\",\n    \"text\": \"中文\",\n  },\n  {\n    \"name\": \"en-US\",\n    \"text\": \"English\",\n  },\n];\n\ni18n.use(initReactI18next)\n  .init({\n    resources,\n    lng: localStorage.getItem(\"i18n__language\") || Object.keys(resources)[0],\n    keySeparator: false,\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","import { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { DownOutlined } from '@ant-design/icons';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Layout, Menu, Dropdown, Button } from 'antd';\n\nimport { languages } from \"../i18n\";\n\nexport default function Header() {\n  const [language, setLanguage] = useState(\"中文\");\n  const [menuKey, setMenuKey] = useState(\"All\");\n\n  const { i18n } = useTranslation();\n\n  let location = useLocation();\n\n  useEffect(() => {\n    let langText = \"\";\n    for (let i in languages) {\n      if (languages[i].name === i18n.language) {\n        langText = languages[i].text;\n      }\n    }\n    setLanguage(langText);\n  }, [i18n.language])\n\n  useEffect(() => {\n    let pathname = location.pathname;\n    if (pathname === \"/\") {\n      setMenuKey(\"All\");\n    } else {\n      let list = pathname.split(\"/\");\n      if (list.length === 3 || list[1] === \"Categories\") {\n        setMenuKey(pathname.split(\"/\")[2]);\n      }\n    }\n  }, [location])\n\n  return (\n    <Layout.Header className=\"header\">\n      <div className=\"layout\">\n        <Link to=\"/\">\n          <div className=\"logo\" />\n        </Link>\n        <div className=\"layoutMenu\">\n          <Menu theme=\"light\" onClick={(info) => {\n            setMenuKey(info.key.toString());\n          }} mode=\"horizontal\" selectedKeys={[menuKey]} defaultSelectedKeys={[menuKey]}>\n            <Menu.Item key=\"All\" className=\"menuItem\"><Link to=\"/categories/All\">All</Link></Menu.Item>\n            <Menu.Item key=\"Algorithms\" className=\"menuItem\"><Link to=\"/categories/Algorithms\">Algorithms</Link></Menu.Item>\n            <Menu.Item key=\"Concurrency\" className=\"menuItem\"><Link to=\"/categories/Concurrency\">Concurrency</Link></Menu.Item>\n            <Menu.Item key=\"Database\" className=\"menuItem\"><Link to=\"/categories/Database\">Database</Link></Menu.Item>\n            <Menu.Item key=\"Shell\" className=\"menuItem\"><Link to=\"/categories/Shell\">Shell</Link></Menu.Item>\n          </Menu>\n          <div className=\"language\">\n            <Dropdown overlay={\n              <Menu onClick={(info) => {\n                let key = info.key.toString();\n                i18n.changeLanguage(key);\n                localStorage.setItem(\"i18n__language\", key);\n              }}>\n                {\n                  languages.map(lang => {\n                    return (\n                      <Menu.Item key={lang.name}>\n                        {lang.text}\n                      </Menu.Item>\n                    );\n                  })\n                }\n              </Menu>\n            }>\n              <Button>\n                {language} <DownOutlined />\n              </Button>\n            </Dropdown>\n          </div>\n        </div>\n      </div>\n    </Layout.Header>\n  );\n}\n","import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useParams } from 'react-router-dom';\nimport { Layout, List, Typography, Pagination } from \"antd\";\nimport { LockOutlined, UnlockOutlined, CheckOutlined } from '@ant-design/icons';\n\nimport { IQuestion, LanguagesDefinition } from '../types';\n\nconst pageSize = 50;\n\nexport default function Questions({ localServer }: any) {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalQuestions, setTotalQuestions] = useState(0);\n  const [questions, setQuestions] = useState<IQuestion[]>([]);\n\n  const { t, i18n } = useTranslation();\n\n  let { category } = useParams();\n\n  useEffect(() => {\n    axios.get(localServer + \"/index.json\")\n      .then(response => {\n        let findNum = function (str: String): number {\n          for (let item of response.data) {\n            if (item[\"category_title\"] === str) {\n              return item[\"num\"];\n            }\n          }\n          return 0;\n        }\n        let allNum = function (): number {\n          let res: number = 0;\n          for (let item of response.data) {\n            res += item[\"num\"];\n          }\n          return res;\n        }\n        if (response.status !== 200) {\n          console.error(\"request questions list with error:\", response.status);\n        } else {\n          if (category === \"All\" || category === \"\" || category === undefined) {\n            setTotalQuestions(allNum());\n          } else {\n            setTotalQuestions(findNum(category));\n          }\n        }\n      });\n  }, [localServer, category]);\n\n  useEffect(() => {\n    let param = category;\n    if (param === \"\" || param === undefined) {\n      param = \"All\";\n    }\n    axios.get(localServer + \"/questions/\" + param + \"/\" + currentPage + \".json\")\n      .then(response => {\n        if (response.status !== 200) {\n          console.error(\"request questions list with error:\", response.status);\n        } else {\n          setQuestions(response.data);\n          for (let question of response.data) {\n            window.localStorage.setItem(question.question_id, JSON.stringify(question));\n          }\n        }\n      });\n  }, [category, currentPage, localServer]);\n\n  return (\n    <Layout.Content className=\"content\">\n      <div className=\"site-layout-content\">\n        <List\n          header={\n            <div className=\"questionHeader\">\n              <div><Typography.Text strong>{t(\"title.Question\")}</Typography.Text></div>\n              <div className=\"description\">\n                {\n                  LanguagesDefinition.map((lang) => {\n                    return (\n                      <div className=\"paid_only\">\n                        {lang.language}\n                      </div>\n                    );\n                  })\n                }\n                <div className=\"paid_only\"><Typography.Text strong>{t(\"title.Pay\")}</Typography.Text></div>\n                <div className=\"difficult\"><Typography.Text strong>{t(\"title.Difficulty\")}</Typography.Text></div>\n                <div className=\"ace\"><Typography.Text strong>{t(\"title.AcRate\")}</Typography.Text></div>\n              </div>\n            </div>\n          }\n          dataSource={questions}\n          renderItem={(item) => (\n            <Link to={`/solutions/${item.question_frontend_id}`} onClick={() => {\n              // window.localStorage.setItem(\"language_show\", \"\");\n            }}>\n              <List.Item>\n                <div className=\"questionItem\">\n                  <div>\n                    <span>\n                      {item.question_frontend_id}.&nbsp;\n                    </span>\n                    {i18n.language === \"en-US\" ? item.title : item.translated_title === \"\" ? item.title : item.translated_title}\n                  </div>\n                  <div className=\"description\">\n                    {\n                      LanguagesDefinition.map((lang) => {\n                        for (let i in item.solutions) {\n                          if (i === lang.language) {\n                            return (\n                              <div className=\"solution_icon\" key={i}>\n                                <Link to={`/solutions/${item.question_frontend_id}`} onClick={() => {\n                                  console.log(i);\n                                  window.localStorage.setItem(\"language_show\", i);\n                                }}>\n                                  <CheckOutlined style={{ color: 'green' }} />\n                                </Link>\n                              </div>\n                            );\n                          }\n                        }\n                        return (\n                          <div className=\"solution_icon\"></div>\n                        );\n                      })\n                    }\n                    <div className=\"paid_only\">{item.paid_only ? <LockOutlined style={{ color: \"#cca766\" }} /> : <UnlockOutlined style={{ color: \"#009975\" }} />}</div>\n                    <div className=\"difficult\">\n                      <span className={item.difficulty.toLowerCase()}>\n                        {t(`difficulty.${item.difficulty}`)}\n                      </span>\n                    </div>\n                    <div className=\"ace\">{item.acRate}</div>\n                  </div>\n                </div>\n              </List.Item>\n            </Link>\n          )}\n        />\n        <div className=\"pagination\">\n          <Pagination\n            current={currentPage}\n            total={totalQuestions}\n            showSizeChanger={false}\n            pageSize={pageSize}\n            onChange={(page) => {\n              setCurrentPage(page);\n            }}\n          />\n        </div>\n      </div>\n    </Layout.Content>\n  );\n}\n","import { Layout } from 'antd';\nimport { Routes, Route, HashRouter } from 'react-router-dom';\n\nimport './App.scss';\n\nimport Header from \"./Header\";\nimport Solutions from \"./Solutions\";\nimport Questions from \"./Questions\";\n\nconst localServer = process.env.NODE_ENV === \"development\" ? \"/db\" : \"/db\";\n\nexport default function App() {\n  return (\n    <Layout>\n      <HashRouter>\n        <Header />\n        <Routes>\n          <Route path=\"/\" element={<Questions localServer={localServer} />} />\n          <Route path=\"/categories/:category\" element={<Questions localServer={localServer} />} />\n          <Route path=\"/solutions/:id\" element={<Solutions localServer={localServer} />} />\n        </Routes>\n        <Layout.Footer style={{ textAlign: 'center' }}>\n          6leetcode ©2020 Created by <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://github.com/tosone\">Tosone</a>\n        </Layout.Footer>\n      </HashRouter>\n    </Layout>\n  );\n}\n","import ReactDOM from 'react-dom';\n\nimport './index.scss';\nimport './i18n';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","export interface IQuestion {\n  title: string;\n  translated_title: string;\n  question_id: number;\n  question_frontend_id: string;\n  difficulty: string;\n  paid_only: boolean;\n  title_slug: string;\n  category_title: string;\n  acRate: string;\n  translated_content: string;\n  content: string;\n  solutions: Map<string, number>;\n}\n\nexport interface ISolution {\n  questionId: number;\n  data: string;\n  language: string;\n  filename: string;\n};\n\nexport const LanguagesDefinition = [\n  { \"language\": \"C\", \"suffix\": \".c\" },\n  { \"language\": \"CPP\", \"suffix\": \".cc\" },\n  { \"language\": \"Go\", \"suffix\": \".go\" },\n  { \"language\": \"Java\", \"suffix\": \".java\" },\n  { \"language\": \"JavaScript\", \"suffix\": \".js\" },\n  { \"language\": \"PHP\", \"suffix\": \".php\" },\n  { \"language\": \"Python\", \"suffix\": \".py\" },\n  { \"language\": \"Rust\", \"suffix\": \".rs\" },\n  { \"language\": \"SQL\", \"suffix\": \".sql\" },\n  { \"language\": \"Bash\", \"suffix\": \".sh\" },\n];\n"],"sourceRoot":""}